server:
  port: 23457
  servlet:
    context-path: /xs_assistant/system
spring:
  application:
    name: xs-system-management #服务名
  banner:
    charset: UTF-8
    location: Banner/XS-Assistant-Banner.txt
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/xs?useUnicode=true&rewriteBatchedStatements=true&allowPublicKeyRetrieval=true&characterEncoding=utf8&allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: xiaoshuai0628
    hikari:
      connection-timeout: 10000
      validation-timeout: 3000
      idle-timeout: 60000
      login-timeout: 5
      max-lifetime: 60000
      maximum-pool-size: 30
      minimum-idle: 15
  data:
    redis:
      host: 127.0.0.1
      port: 5050
      jedis:
        pool:
          enabled: true
          max-active: -1
          max-wait: 8s
          max-idle: 100
          min-idle: 0
      timeout: 120000
      password: xs0628
  devtools:
    restart:
      enabled: true
  freemarker:
    cache: false #页面不加载缓存，修改即时生效
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
eureka:
  client:
    register-with-eureka: true
    #是否从EurekaServer中抓取已有的注册信息，默认为true，单点无所谓，集群必须设置true才能和ribbon使用负载均衡
    fetch-registry: true
    service-url:
      defaultZone: http://127.0.0.1:12577/eureka
  instance:
    prefer-ip-address: true
#####################spring cloud 使用 Spring Boot actuator 监控完善信息###########################################
# Spring Boot 2.50对 actuator 监控屏蔽了大多数的节点，只暴露了 heath 节点，本段配置（*）就是为了开启所有的节点
management:
  tracing:
    sampling:
      probability: 1.0 #设置跟踪采样的概率为100%(1.0),这意味着应用程序处理的所有请求都被跟踪,如果是10%(0.1)则为10条请求只有1条跟踪
  endpoints:
    web:
      exposure:
        include: "*"
#  zipkin:
#    tracing:
#      endpoint: http://127.0.0.1:9411/api/v2/spans
info:
  app.name: xs-service-user
  company.name: com.xs.assistant
#resilience4j:
#  #重试器
#  retry:
#    instances:
#      user-info-api:
#        max-attempts: 2
#        wait-duration: 1s
#      user-customer-register-api:
#        max-attempts: 3
#        wait-duration: 1s
#  #熔断器
#  circuitbreaker:
#    instances:
#      user-breaker-api:
#        register-health-indicator: true #是否将熔断器的状态注册为健康检查指标，上报熔断器的健康状态
#        sliding-window-size: 10 #用于计算失败率的滑动窗口大小
#        sliding-window-type: TIME_BASED
#        permitted-number-of-calls-in-half-open-state: 3 #当断路器处于half-open的状态下，允许最大调用次数为3
#        wait-duration-in-open-state: 5s #当熔断器打开后，会等待5s的时间尝试进入half-open状态
#        failure-rate-threshold: 20 #当失败率达到20%,断路器则会打开,阻止进一步的调用
#        event-consumer-buffer-size: 10
#  #限制器
#  ratelimiter:
#    instances:
#      user-flow-limit-api:
#        limit-for-period: 1 #在一个特定的时间周期内，允许的最大数量请求
#        limit-refresh-period: 1s #设置特定的时间周期，这里设定为1s
#        timeout-duration: 100ms #设置等待超时时间。当请求超过限制时,客户端立即收到超时的相应，而不等待处理。
#hystrix:
#  command:
#    default:
#      execution:
#        isolation:
#          thread:
#            timeoutInMilliseconds: 1000
############### Micrometer Tracing + Zipkin 链路追踪 ###############
#logging:
#  pattern:
#    level: ${spring.application.name:},%X{traceId:-},%X{spanId:-} #日志记录格式